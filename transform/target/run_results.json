{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2024-12-13T10:20:58.313933Z", "invocation_id": "5745a2df-a595-401c-ba40-091bba02ed1f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:57.600688Z", "completed_at": "2024-12-13T10:20:57.608674Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:57.609165Z", "completed_at": "2024-12-13T10:20:57.696103Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11290287971496582, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.clean", "compiled": true, "compiled_code": "WITH data_clean AS (\n    SELECT \n        *,\n        COALESCE(TRY_CAST(\"Consommation (MW)\" AS INT), 0) AS consommation,\n        COALESCE(TRY_CAST(\"Eolien (MW)\" AS INT), 0) AS eolien,\n        COALESCE(TRY_CAST(\"Thermique (MW)\" AS INT), 0) AS thermique,\n        COALESCE(TRY_CAST(\"Bio\u00e9nergies (MW)\" AS INT), 0) AS bioenergies,\n        COALESCE(TRY_CAST(\"Nucl\u00e9aire (MW)\" AS INT), 0) AS nucleaire,\n        COALESCE(TRY_CAST(\"Solaire (MW)\" AS INT), 0) AS solaire,\n        COALESCE(TRY_CAST(\"Hydraulique (MW)\" AS INT), 0) AS hydraulique,\n        COALESCE(TRY_CAST(\"Pompage (MW)\" AS INT), 0) AS pompage,\n        COALESCE(TRY_CAST(\"Ech. physiques (MW)\" AS INT), 0) AS ech_physiques\n    FROM eco2\n    WHERE \"R\u00e9gion\" IS NOT NULL AND \"Date\" IS NOT NULL\n),\ndata_final AS (\n    SELECT \n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\", \n        \"Date\", \n        \"Heure\",\n        consommation,\n        eolien,\n        thermique,\n        bioenergies,\n        nucleaire,\n        solaire,\n        hydraulique,\n        pompage,\n        ech_physiques,\n        COALESCE(nucleaire, 0) + \n        COALESCE(eolien, 0) +\n        COALESCE(solaire, 0) +\n        COALESCE(hydraulique, 0) +\n        COALESCE(thermique, 0) AS production_totale\n    FROM data_clean\n)\n\nSELECT * FROM data_final", "relation_name": "\"dev\".\"main\".\"clean\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:57.717591Z", "completed_at": "2024-12-13T10:20:57.720512Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:57.720946Z", "completed_at": "2024-12-13T10:20:57.760615Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06020975112915039, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.grain_jour", "compiled": true, "compiled_code": "WITH data_clean AS (\n    SELECT *\n    from clean\n          \n)\nSELECT \n    \"Date\", \n    \"R\u00e9gion\", \n    SUM(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS consommation_totale,\n    SUM(COALESCE(TRY_CAST(\"thermique\" AS INT), 0)) AS thermique_total,\n    SUM(COALESCE(TRY_CAST(\"bioenergies\" AS INT), 0)) AS bioenergies_total,\n    SUM(COALESCE(TRY_CAST(\"eolien\" AS INT), 0)) AS eolien_total,\n    SUM(COALESCE(TRY_CAST(\"nucleaire\" AS INT), 0)) AS nucleaire_total,\n    SUM(COALESCE(TRY_CAST(\"solaire\" AS INT), 0)) AS solaire_total,\n    SUM(COALESCE(TRY_CAST(\"hydraulique\" AS INT), 0)) AS hydraulique_total,\n    SUM(COALESCE(TRY_CAST(\"pompage\" AS INT), 0)) AS pompage_total,\n    SUM(COALESCE(TRY_CAST(\"ech_physiques\" AS INT), 0)) AS ech_physiques_total,\n    SUM(COALESCE(TRY_CAST(\"production_totale\" AS INT), 0)) AS production_totale\n   \nFROM data_clean\nGROUP BY \"Date\", \"R\u00e9gion\"\nORDER BY \"Date\", \"R\u00e9gion\"", "relation_name": "\"dev\".\"main\".\"grain_jour\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:57.780780Z", "completed_at": "2024-12-13T10:20:57.784405Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:57.784885Z", "completed_at": "2024-12-13T10:20:57.843978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08391571044921875, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "\"dev\".\"main\".\"my_first_dbt_model\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:57.867928Z", "completed_at": "2024-12-13T10:20:57.906513Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:57.906962Z", "completed_at": "2024-12-13T10:20:57.946176Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09661698341369629, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_1", "compiled": true, "compiled_code": "SELECT \n    strftime('%Y-%m', Date) AS mois,  -- Utilisation de strftime pour extraire l'ann\u00e9e et le mois\n    \"R\u00e9gion\", \n    SUM(COALESCE(TRY_CAST(\"consommation\" AS INT), 0))/2000 AS consommation_totale_en_GWH,\n    SUM(COALESCE(production_totale, 0))/2000 AS production_totale_en_GWH,\n\n    MIN(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS min_consommation_totale,\n    MIN(COALESCE(production_totale, 0)) AS min_production_totale,\n\n    MAX(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS max_consommation_totale,\n    MAX(COALESCE(production_totale, 0)) AS max_production_totale,\n    \n    AVG(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS moyenne_consommation_totale,\n\n    AVG(COALESCE(production_totale, 0)) AS moyenne_production_totale\n   from  \"dev\".\"main\".\"clean\"\nGROUP BY strftime('%Y-%m', Date), \"R\u00e9gion\"  -- Remplacer TO_CHAR par strftime\nORDER BY mois, \"R\u00e9gion\"  -- Tri par mois et r\u00e9gion", "relation_name": "\"dev\".\"main\".\"3_1\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:57.967614Z", "completed_at": "2024-12-13T10:20:57.973154Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:57.973636Z", "completed_at": "2024-12-13T10:20:58.014643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06480121612548828, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_2", "compiled": true, "compiled_code": "-- R\u00e9cup\u00e9rer les r\u00e9gions distinctes dans un set Jinja\n\n\nSELECT \n    Date,\n    \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Bourgogne-Franche-Comt\u00e9' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Bourgogne-Franche-Comt\u00e9\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Centre-Val de Loire' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Centre-Val de Loire\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Nouvelle-Aquitaine' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Nouvelle-Aquitaine\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Occitanie' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Occitanie\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = '\u00cele-de-France' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"\u00cele-de-France\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Normandie' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Normandie\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Grand Est' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Grand Est\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Provence-Alpes-C\u00f4te d''Azur' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Provence-Alpes-C\u00f4te d''Azur\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Bretagne' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Bretagne\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Hauts-de-France' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Hauts-de-France\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Auvergne-Rh\u00f4ne-Alpes' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Auvergne-Rh\u00f4ne-Alpes\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Pays de la Loire' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Pays de la Loire\"\n        \n    \n    \nFROM \n    \"dev\".\"main\".\"clean\"\nGROUP BY \n    Date\nORDER BY \n    Date", "relation_name": "\"dev\".\"main\".\"3_2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:58.035150Z", "completed_at": "2024-12-13T10:20:58.038844Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:58.039324Z", "completed_at": "2024-12-13T10:20:58.079497Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.061311960220336914, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_3", "compiled": true, "compiled_code": "WITH data_with_consumption AS (\n    SELECT \n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\", \n        \"Date\", \n        consommation,  -- Consommation en MW\n        -- Calcul de la consommation cumul\u00e9e en GWh pour chaque jour du mois \u00e9coul\u00e9\n        SUM(COALESCE(consommation, 0)) OVER (\n            PARTITION BY \"R\u00e9gion\", EXTRACT(YEAR FROM \"Date\"), EXTRACT(MONTH FROM \"Date\")\n            ORDER BY \"Date\"\n            RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) / 2000 AS consommation_gwh  -- Conversion de la consommation en GWh\n    FROM      \"dev\".\"main\".\"clean\"\n\n)\n\nSELECT \n    \"Code INSEE r\u00e9gion\", \n    \"R\u00e9gion\", \n    \"Date\", \n    consommation, \n    consommation_gwh\nFROM data_with_consumption\nORDER BY \"R\u00e9gion\", \"Date\"", "relation_name": "\"dev\".\"main\".\"3_3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:58.099315Z", "completed_at": "2024-12-13T10:20:58.102959Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:58.103447Z", "completed_at": "2024-12-13T10:20:58.142609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06069064140319824, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_4", "compiled": true, "compiled_code": "WITH daily_consumption AS (\n    SELECT \n        \"R\u00e9gion\",\n        \"Date\",\n        SUM(COALESCE(consommation, 0)) / 2000 AS consommation_gwh  -- Conversion MW \u2192 GWh\n    FROM \"dev\".\"main\".\"clean\"\n    GROUP BY \"R\u00e9gion\", \"Date\"\n),\ndaily_variation AS (\n    SELECT \n        \"R\u00e9gion\",\n        \"Date\",\n        consommation_gwh,\n        consommation_gwh - LAG(consommation_gwh) OVER (\n            PARTITION BY \"R\u00e9gion\"\n            ORDER BY \"Date\"\n        ) AS variation_gwh,\n        CASE \n            WHEN LAG(consommation_gwh) OVER (\n                PARTITION BY \"R\u00e9gion\"\n                ORDER BY \"Date\"\n            ) IS NOT NULL AND LAG(consommation_gwh) OVER (\n                PARTITION BY \"R\u00e9gion\"\n                ORDER BY \"Date\"\n            ) != 0 \n            THEN (consommation_gwh - LAG(consommation_gwh) OVER (\n                    PARTITION BY \"R\u00e9gion\"\n                    ORDER BY \"Date\"\n                )) / LAG(consommation_gwh) OVER (\n                    PARTITION BY \"R\u00e9gion\"\n                    ORDER BY \"Date\"\n                ) * 100\n            ELSE NULL\n        END AS taux_variation_pct\n    FROM daily_consumption\n),\ntop_variations AS (\n    SELECT \n        \"R\u00e9gion\",\n        \"Date\",\n        consommation_gwh,\n        variation_gwh,\n        taux_variation_pct\n    FROM daily_variation\n    WHERE variation_gwh IS NOT NULL  -- Ignore les premi\u00e8res lignes de chaque r\u00e9gion\n    ORDER BY ABS(variation_gwh) DESC  -- Trier par \u00e9cart absolu d\u00e9croissant\n    LIMIT 20\n)\nSELECT *\nFROM top_variations", "relation_name": "\"dev\".\"main\".\"3_4\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:58.163066Z", "completed_at": "2024-12-13T10:20:58.167224Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:58.167736Z", "completed_at": "2024-12-13T10:20:58.209616Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06331038475036621, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_5", "compiled": true, "compiled_code": "WITH yearly_renewable_production AS (\n    SELECT\n        EXTRACT(YEAR FROM \"Date\") AS year,\n        SUM(COALESCE(eolien, 0) + \n            COALESCE(solaire, 0) + \n            COALESCE(hydraulique, 0) + \n            COALESCE(bioenergies, 0)) / 2000 AS production_renouvelable_totale_gwh -- Conversion MW \u2192 GWh\n    FROM \"dev\".\"main\".\"clean\"\n    WHERE EXTRACT(YEAR FROM \"Date\") BETWEEN 2013 AND 2021\n    GROUP BY EXTRACT(YEAR FROM \"Date\")\n),\ndaily_cumulative_consumption AS (\n    SELECT\n        EXTRACT(YEAR FROM \"Date\") AS year,\n        \"Date\",\n        SUM(COALESCE(consommation, 0)) / 2000 AS consommation_journaliere_gwh,\n        SUM(SUM(COALESCE(consommation, 0)) / 2000) OVER (\n            PARTITION BY EXTRACT(YEAR FROM \"Date\")\n            ORDER BY \"Date\"\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS consommation_cumulee_gwh -- Consommation cumul\u00e9e en GWh\n    FROM \"dev\".\"main\".\"clean\"\n    WHERE EXTRACT(YEAR FROM \"Date\") BETWEEN 2013 AND 2021\n    GROUP BY EXTRACT(YEAR FROM \"Date\"), \"Date\"\n),\nthreshold_exceedance AS (\n    SELECT\n        dcc.year,\n        dcc.\"Date\",\n        yrp.production_renouvelable_totale_gwh,\n        dcc.consommation_cumulee_gwh\n    FROM daily_cumulative_consumption dcc\n    JOIN yearly_renewable_production yrp\n        ON dcc.year = yrp.year\n    WHERE dcc.consommation_cumulee_gwh >= yrp.production_renouvelable_totale_gwh\n),\nfirst_exceed_date AS (\n    SELECT\n        year,\n        MIN(\"Date\") AS date_depassement -- Premi\u00e8re date o\u00f9 la consommation d\u00e9passe la production annuelle renouvelable\n    FROM threshold_exceedance\n    GROUP BY year\n)\nSELECT *\nFROM first_exceed_date\nORDER BY year", "relation_name": "\"dev\".\"main\".\"3_5\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-13T10:20:58.229571Z", "completed_at": "2024-12-13T10:20:58.233123Z"}, {"name": "execute", "started_at": "2024-12-13T10:20:58.233576Z", "completed_at": "2024-12-13T10:20:58.273722Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06148123741149902, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom \"dev\".\"main\".\"my_first_dbt_model\"\nwhere id = 1", "relation_name": "\"dev\".\"main\".\"my_second_dbt_model\""}], "elapsed_time": 1.0935945510864258, "args": {"require_explicit_package_overrides_for_builtin_materializations": true, "log_file_max_bytes": 10485760, "quiet": false, "strict_mode": false, "enable_legacy_logger": false, "which": "run", "cache_selected_only": false, "introspect": true, "require_resource_names_without_spaces": false, "favor_state": false, "defer": false, "profiles_dir": "/home/ETUDIANT/e24a518u/.dbt", "warn_error_options": {"include": [], "exclude": []}, "write_json": true, "project_dir": "/home/ETUDIANT/e24a518u/Bureau/tp sql/transform", "partial_parse_file_diff": true, "log_level": "info", "print": true, "show_resource_report": false, "populate_cache": true, "log_level_file": "debug", "exclude": [], "log_format": "default", "invocation_command": "dbt run", "source_freshness_run_project_hooks": false, "use_colors_file": true, "partial_parse": true, "version_check": true, "printer_width": 80, "vars": {}, "indirect_selection": "eager", "use_colors": true, "macro_debugging": false, "empty": false, "select": [], "log_format_file": "debug", "log_path": "/home/ETUDIANT/e24a518u/Bureau/tp sql/transform/logs", "send_anonymous_usage_stats": true, "static_parser": true}}