{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2025-01-09T11:47:02.343960Z", "invocation_id": "690f2729-7b3e-4143-86c0-7d9373e21b05", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.027383Z", "completed_at": "2025-01-09T11:47:01.035120Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.035473Z", "completed_at": "2025-01-09T11:47:01.106269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09855055809020996, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.4_2", "compiled": true, "compiled_code": "WITH consommation_par_saison AS (\n    SELECT\n        -- Identifier la saison\n        CASE\n            WHEN strftime('%m', \"Date\") IN ('12', '01', '02') THEN 'Hiver'\n            WHEN strftime('%m', \"Date\") IN ('03', '04', '05') THEN 'Printemps'\n            WHEN strftime('%m', \"Date\") IN ('06', '07', '08') THEN 'Et\u00e9'\n            ELSE 'Automne'\n        END AS saison,\n        -- R\u00e9gion et code INSEE\n        \"Code INSEE r\u00e9gion\" AS region_code,\n        \"R\u00e9gion\",\n        -- Sommes des consommations par type\n        SUM(consommation) AS consommation_total_GWh,\n        SUM(eolien) AS eolien_GWh,\n        SUM(thermique) AS thermique_GWh,\n        SUM(bioenergies) AS bioenergies_GWh,\n        SUM(nucleaire) AS nucleaire_GWh,\n        SUM(solaire) AS solaire_GWh,\n        SUM(hydraulique) AS hydraulique_GWh,\n        SUM(pompage) AS pompage_GWh,\n        SUM(production_totale) AS production_totale_GWh,\n        -- Moyenne, minimum et maximum des temp\u00e9ratures par saison et r\u00e9gion\n        AVG(tmin) AS temperature_min_moyenne,\n        AVG(tmax) AS temperature_max_moyenne,\n        AVG(tmoy) AS temperature_avg_moyenne,\n        MIN(tmin) AS temperature_min_min,\n        MAX(tmax) AS temperature_max_max\n    FROM clean_temp\n    GROUP BY\n        saison,\n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\"\n)\nSELECT * FROM consommation_par_saison", "relation_name": "\"dev\".\"main\".\"4_2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.129116Z", "completed_at": "2025-01-09T11:47:01.132530Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.132870Z", "completed_at": "2025-01-09T11:47:01.169612Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05946683883666992, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.4_2_2", "compiled": true, "compiled_code": "WITH consommation_par_saison AS (\n    SELECT\n        -- Identifier la saison\n        CASE\n            WHEN strftime('%m', \"Date\") IN ('12', '01', '02') THEN 'Hiver'\n            WHEN strftime('%m', \"Date\") IN ('03', '04', '05') THEN 'Printemps'\n            WHEN strftime('%m', \"Date\") IN ('06', '07', '08') THEN 'Et\u00e9'\n            ELSE 'Automne'\n        END AS saison,\n        -- R\u00e9gion et code INSEE\n        \"Code INSEE r\u00e9gion\" AS region_code,\n        \"R\u00e9gion\",\n        -- Sommes des consommations par type\n        SUM(consommation) AS consommation_total_GWh,\n        SUM(pompage) AS pompage_GWh,\n        SUM(thermique) AS Thermique_GWh,\n        SUM(nucleaire) AS Nucl\u00e9aire_GWh,\n        SUM(eolien) AS Eolien_GWh,\n        SUM(solaire) AS Solaire_GWh,\n        SUM(hydraulique) AS Hydraulique_GWh,\n        SUM(bioenergies) AS Bio\u00e9nergies_GWh,\n        SUM(production_totale) AS Production_Totale_GWh,\n        -- Moyenne, minimum et maximum des temp\u00e9ratures par saison et r\u00e9gion\n        AVG(tmin) AS temperature_min_moyenne,\n        AVG(tmax) AS temperature_max_moyenne,\n        AVG(tmoy) AS temperature_avg_moyenne,\n        MIN(tmin) AS temperature_min_min,\n        MAX(tmax) AS temperature_max_max,\n        \n        -- Classification des temp\u00e9ratures par intervalle\n        CASE\n            WHEN tmin < 0 THEN 'Glacial'\n            WHEN tmin >= 0 AND tmin < 8 THEN 'Froid'\n            WHEN tmin >= 8 AND tmin < 17 THEN 'Mod\u00e9r\u00e9'\n            WHEN tmin >= 17 AND tmin < 25 THEN 'Id\u00e9al'\n            WHEN tmin >= 25 AND tmin < 33 THEN 'Chaud'\n            ELSE 'Extr\u00eame'\n        END AS temperature_intervalle\n    FROM clean_temp\n    GROUP BY\n        saison,\n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\",\n        tmin -- Ajouter tmin au GROUP BY\n)\n\nSELECT * FROM consommation_par_saison", "relation_name": "\"dev\".\"main\".\"4_2_2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.190953Z", "completed_at": "2025-01-09T11:47:01.193560Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.193897Z", "completed_at": "2025-01-09T11:47:01.264410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09600353240966797, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.4_2_3", "compiled": true, "compiled_code": "WITH consommation_par_periode AS (\n    SELECT\n        -- Agr\u00e9gation par jour\n        \"Date\" AS jour,\n        SUM(consommation) AS consommation_total_GWh,\n        SUM(pompage) AS pompage_GWh,\n        SUM(thermique) AS Thermique_GWh,\n        SUM(nucleaire) AS Nucl\u00e9aire_GWh,\n        SUM(eolien) AS Eolien_GWh,\n        SUM(solaire) AS Solaire_GWh,\n        SUM(hydraulique) AS Hydraulique_GWh,\n        SUM(bioenergies) AS Bio\u00e9nergies_GWh,\n        SUM(production_totale) AS Production_Totale_GWh,\n        AVG(tmin) AS temperature_min_moyenne,\n        AVG(tmax) AS temperature_max_moyenne,\n        AVG(tmoy) AS temperature_avg_moyenne,\n        MIN(tmin) AS temperature_min_min,\n        MAX(tmax) AS temperature_max_max,\n        \n        -- Agr\u00e9gation par mois\n        strftime('%m', \"Date\") AS mois,\n        \n        -- Agr\u00e9gation par ann\u00e9e\n        strftime('%Y', \"Date\") AS annee,\n        \n        -- Agr\u00e9gation pour toute la p\u00e9riode\n        'Toute la p\u00e9riode' AS periode_totale\n        \n    FROM clean_temp\n    GROUP BY\n        \"Date\",  -- Jour\n        mois,    -- Mois\n        annee,   -- Ann\u00e9e\n        periode_totale  -- Toute la p\u00e9riode\n)\n\nSELECT * FROM consommation_par_periode", "relation_name": "\"dev\".\"main\".\"4_2_3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.290150Z", "completed_at": "2025-01-09T11:47:01.293104Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.293535Z", "completed_at": "2025-01-09T11:47:01.335126Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0660862922668457, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.4_2_4", "compiled": true, "compiled_code": "WITH taux_de_couverture AS (\n    SELECT\n        \"Date\",\n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\",\n        SUM(production_totale) AS production_totale_GWh,\n        SUM(consommation) AS consommation_GWh,\n        \n        -- Calcul du TCO (Production / Consommation)\n        (SUM(production_totale) / NULLIF(SUM(consommation), 0)) AS TCO\n    FROM clean_temp\n    GROUP BY\n        \"Date\",\n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\"\n)\n\nSELECT * FROM taux_de_couverture", "relation_name": "\"dev\".\"main\".\"4_2_4\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.359114Z", "completed_at": "2025-01-09T11:47:01.363314Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.363734Z", "completed_at": "2025-01-09T11:47:01.397835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06027483940124512, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.4_2_5", "compiled": true, "compiled_code": "WITH consommation_par_filiere AS (\n    SELECT\n        \"Date\",\n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\",\n        SUM(eolien) AS Eolien_GWh,\n        SUM(thermique) AS Thermique_GWh,\n        SUM(bioenergies) AS Bio\u00e9nergies_GWh,\n        SUM(nucleaire) AS Nucl\u00e9aire_GWh,\n        SUM(solaire) AS Solaire_GWh,\n        SUM(hydraulique) AS Hydraulique_GWh,\n        SUM(pompage) AS Pompage_GWh,\n        SUM(consommation) AS Consommation_GWh\n    FROM clean_temp\n    GROUP BY\n        \"Date\",\n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\"\n)\n\nSELECT * FROM consommation_par_filiere", "relation_name": "\"dev\".\"main\".\"4_2_5\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.422351Z", "completed_at": "2025-01-09T11:47:01.425401Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.425819Z", "completed_at": "2025-01-09T11:47:01.470135Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06880664825439453, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.4_3", "compiled": true, "compiled_code": "WITH temperature_interval AS (\n    SELECT \n        CASE\n            WHEN tmin < 0 THEN 'Glacial'\n            WHEN tmin >= 0 AND tmin < 8 THEN 'Froid'\n            WHEN tmin >= 8 AND tmin < 17 THEN 'Mod\u00e9r\u00e9'\n            WHEN tmin >= 17 AND tmin < 25 THEN 'Id\u00e9al'\n            WHEN tmin >= 25 AND tmin < 33 THEN 'Chaud'\n            ELSE 'Extr\u00eame'\n        END AS temperature_intervalle,\n        \"Date\",\n        \"Heure\",\n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\",\n        consommation,\n        eolien,\n        thermique,\n        bioenergies,\n        nucleaire,\n        solaire,\n        hydraulique,\n        pompage,\n        production_totale\n    FROM clean_temp\n),\nquart_de_jour AS (\n    SELECT \n        ti.\"Code INSEE r\u00e9gion\",\n        ti.\"R\u00e9gion\",\n        ti.\"Date\",\n        ti.\"Heure\",\n        CASE \n            WHEN strftime('%H', CAST('2000-01-01 ' || ti.\"Heure\" AS TIMESTAMP)) BETWEEN '00' AND '06' THEN 'Nuit'\n            WHEN strftime('%H', CAST('2000-01-01 ' || ti.\"Heure\" AS TIMESTAMP)) BETWEEN '07' AND '12' THEN 'Matin'\n            WHEN strftime('%H', CAST('2000-01-01 ' || ti.\"Heure\" AS TIMESTAMP)) BETWEEN '13' AND '18' THEN 'Apr\u00e8s-midi'\n            ELSE 'Soir'\n        END AS quart,\n        ti.temperature_intervalle,\n        ti.consommation,\n        ti.eolien,\n        ti.thermique,\n        ti.bioenergies,\n        ti.nucleaire,\n        ti.solaire,\n        ti.hydraulique,\n        ti.pompage,\n        ti.production_totale\n    FROM temperature_interval ti\n),\ncuboide_par_mois_quart_temp AS (\n    SELECT \n        strftime('%Y-%m', q.\"Date\") AS mois,\n        q.quart,\n        q.temperature_intervalle,\n        SUM(q.consommation) AS consommation_total_GWh,\n        SUM(q.eolien) AS Eolien_GWh,\n        SUM(q.thermique) AS Thermique_GWh,\n        SUM(q.bioenergies) AS Bio\u00e9nergies_GWh,\n        SUM(q.nucleaire) AS Nucl\u00e9aire_GWh,\n        SUM(q.solaire) AS Solaire_GWh,\n        SUM(q.hydraulique) AS Hydraulique_GWh,\n        SUM(q.pompage) AS Pompage_GWh,\n        SUM(q.production_totale) AS Production_Totale_GWh\n    FROM quart_de_jour q\n    GROUP BY\n        mois, \n        q.quart,\n        q.temperature_intervalle\n)\nSELECT * FROM cuboide_par_mois_quart_temp", "relation_name": "\"dev\".\"main\".\"4_3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.493992Z", "completed_at": "2025-01-09T11:47:01.497093Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.497646Z", "completed_at": "2025-01-09T11:47:01.535858Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06240987777709961, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.clean", "compiled": true, "compiled_code": "WITH data_clean AS (\n    SELECT \n        *,\n        COALESCE(TRY_CAST(\"Consommation (MW)\" AS INT), 0) AS consommation,\n        COALESCE(TRY_CAST(\"Eolien (MW)\" AS INT), 0) AS eolien,\n        COALESCE(TRY_CAST(\"Thermique (MW)\" AS INT), 0) AS thermique,\n        COALESCE(TRY_CAST(\"Bio\u00e9nergies (MW)\" AS INT), 0) AS bioenergies,\n        COALESCE(TRY_CAST(\"Nucl\u00e9aire (MW)\" AS INT), 0) AS nucleaire,\n        COALESCE(TRY_CAST(\"Solaire (MW)\" AS INT), 0) AS solaire,\n        COALESCE(TRY_CAST(\"Hydraulique (MW)\" AS INT), 0) AS hydraulique,\n        COALESCE(TRY_CAST(\"Pompage (MW)\" AS INT), 0) AS pompage,\n        COALESCE(TRY_CAST(\"Ech. physiques (MW)\" AS INT), 0) AS ech_physiques\n    FROM eco2\n    WHERE \"R\u00e9gion\" IS NOT NULL AND \"Date\" IS NOT NULL\n),\ndata_final AS (\n    SELECT \n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\", \n        \"Date\", \n        \"Heure\",\n        consommation,\n        eolien,\n        thermique,\n        bioenergies,\n        nucleaire,\n        solaire,\n        hydraulique,\n        pompage,\n        ech_physiques,\n        COALESCE(nucleaire, 0) + \n        COALESCE(eolien, 0) +\n        COALESCE(solaire, 0) +\n        COALESCE(hydraulique, 0) +\n        COALESCE(thermique, 0) AS production_totale\n    FROM data_clean\n)\n\nSELECT * FROM data_final", "relation_name": "\"dev\".\"main\".\"clean\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.559924Z", "completed_at": "2025-01-09T11:47:01.562849Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.563291Z", "completed_at": "2025-01-09T11:47:01.605618Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06698036193847656, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.grain_jour", "compiled": true, "compiled_code": "WITH data_clean AS (\n    SELECT *\n    from clean\n          \n)\nSELECT \n    \"Date\", \n    \"R\u00e9gion\", \n    SUM(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS consommation_totale,\n    SUM(COALESCE(TRY_CAST(\"thermique\" AS INT), 0)) AS thermique_total,\n    SUM(COALESCE(TRY_CAST(\"bioenergies\" AS INT), 0)) AS bioenergies_total,\n    SUM(COALESCE(TRY_CAST(\"eolien\" AS INT), 0)) AS eolien_total,\n    SUM(COALESCE(TRY_CAST(\"nucleaire\" AS INT), 0)) AS nucleaire_total,\n    SUM(COALESCE(TRY_CAST(\"solaire\" AS INT), 0)) AS solaire_total,\n    SUM(COALESCE(TRY_CAST(\"hydraulique\" AS INT), 0)) AS hydraulique_total,\n    SUM(COALESCE(TRY_CAST(\"pompage\" AS INT), 0)) AS pompage_total,\n    SUM(COALESCE(TRY_CAST(\"ech_physiques\" AS INT), 0)) AS ech_physiques_total,\n    SUM(COALESCE(TRY_CAST(\"production_totale\" AS INT), 0)) AS production_totale\n   \nFROM data_clean\nGROUP BY \"Date\", \"R\u00e9gion\"\nORDER BY \"Date\", \"R\u00e9gion\"", "relation_name": "\"dev\".\"main\".\"grain_jour\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.629768Z", "completed_at": "2025-01-09T11:47:01.633476Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.633888Z", "completed_at": "2025-01-09T11:47:01.691105Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08448433876037598, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "\"dev\".\"main\".\"my_first_dbt_model\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.717726Z", "completed_at": "2025-01-09T11:47:01.721712Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.722162Z", "completed_at": "2025-01-09T11:47:01.767215Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07091712951660156, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_1", "compiled": true, "compiled_code": "SELECT \n    strftime('%Y-%m', Date) AS mois,  -- Utilisation de strftime pour extraire l'ann\u00e9e et le mois\n    \"R\u00e9gion\", \n    SUM(COALESCE(TRY_CAST(\"consommation\" AS INT), 0))/2000 AS consommation_totale_en_GWH,\n    SUM(COALESCE(production_totale, 0))/2000 AS production_totale_en_GWH,\n\n    MIN(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS min_consommation_totale,\n    MIN(COALESCE(production_totale, 0)) AS min_production_totale,\n\n    MAX(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS max_consommation_totale,\n    MAX(COALESCE(production_totale, 0)) AS max_production_totale,\n    \n    AVG(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) AS moyenne_consommation_totale,\n\n    AVG(COALESCE(production_totale, 0)) AS moyenne_production_totale\n   from  \"dev\".\"main\".\"clean\"\nGROUP BY strftime('%Y-%m', Date), \"R\u00e9gion\"  -- Remplacer TO_CHAR par strftime\nORDER BY mois, \"R\u00e9gion\"  -- Tri par mois et r\u00e9gion", "relation_name": "\"dev\".\"main\".\"3_1\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.792552Z", "completed_at": "2025-01-09T11:47:01.798707Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.799155Z", "completed_at": "2025-01-09T11:47:01.836562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0662846565246582, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_2", "compiled": true, "compiled_code": "-- R\u00e9cup\u00e9rer les r\u00e9gions distinctes dans un set Jinja\n\n\nSELECT \n    Date,\n    \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Bourgogne-Franche-Comt\u00e9' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Bourgogne-Franche-Comt\u00e9\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Centre-Val de Loire' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Centre-Val de Loire\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Nouvelle-Aquitaine' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Nouvelle-Aquitaine\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Occitanie' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Occitanie\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = '\u00cele-de-France' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"\u00cele-de-France\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Normandie' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Normandie\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Grand Est' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Grand Est\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Provence-Alpes-C\u00f4te d''Azur' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Provence-Alpes-C\u00f4te d''Azur\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Bretagne' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Bretagne\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Hauts-de-France' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Hauts-de-France\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Auvergne-Rh\u00f4ne-Alpes' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Auvergne-Rh\u00f4ne-Alpes\"\n        , \n    \n        -- On s'assure que les noms de r\u00e9gions contenant des caract\u00e8res sp\u00e9ciaux sont correctement \u00e9chapp\u00e9s\n        SUM(CASE WHEN \"R\u00e9gion\" = 'Pays de la Loire' THEN COALESCE(CAST(\"consommation\" AS INT), 0) / 2000 ELSE 0 END) AS \"Pays de la Loire\"\n        \n    \n    \nFROM \n    \"dev\".\"main\".\"clean\"\nGROUP BY \n    Date\nORDER BY \n    Date", "relation_name": "\"dev\".\"main\".\"3_2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.861852Z", "completed_at": "2025-01-09T11:47:01.865948Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.866430Z", "completed_at": "2025-01-09T11:47:01.902218Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.061925411224365234, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_3", "compiled": true, "compiled_code": "WITH data_with_consumption AS (\n    SELECT \n        \"Code INSEE r\u00e9gion\",\n        \"R\u00e9gion\", \n        \"Date\", \n        consommation,  -- Consommation en MW\n        -- Calcul de la consommation cumul\u00e9e en GWh pour chaque jour du mois \u00e9coul\u00e9\n        SUM(COALESCE(consommation, 0)) OVER (\n            PARTITION BY \"R\u00e9gion\", EXTRACT(YEAR FROM \"Date\"), EXTRACT(MONTH FROM \"Date\")\n            ORDER BY \"Date\"\n            RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) / 2000 AS consommation_gwh  -- Conversion de la consommation en GWh\n    FROM      \"dev\".\"main\".\"clean\"\n\n)\n\nSELECT \n    \"Code INSEE r\u00e9gion\", \n    \"R\u00e9gion\", \n    \"Date\", \n    consommation, \n    consommation_gwh\nFROM data_with_consumption\nORDER BY \"R\u00e9gion\", \"Date\"", "relation_name": "\"dev\".\"main\".\"3_3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.926736Z", "completed_at": "2025-01-09T11:47:01.930837Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:01.931353Z", "completed_at": "2025-01-09T11:47:01.971210Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06572198867797852, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_4", "compiled": true, "compiled_code": "WITH daily_consumption AS (\n    SELECT \n        \"R\u00e9gion\",\n        \"Date\",\n        SUM(COALESCE(consommation, 0)) / 2000 AS consommation_gwh  -- Conversion MW \u2192 GWh\n    FROM \"dev\".\"main\".\"clean\"\n    GROUP BY \"R\u00e9gion\", \"Date\"\n),\ndaily_variation AS (\n    SELECT \n        \"R\u00e9gion\",\n        \"Date\",\n        consommation_gwh,\n        consommation_gwh - LAG(consommation_gwh) OVER (\n            PARTITION BY \"R\u00e9gion\"\n            ORDER BY \"Date\"\n        ) AS variation_gwh,\n        CASE \n            WHEN LAG(consommation_gwh) OVER (\n                PARTITION BY \"R\u00e9gion\"\n                ORDER BY \"Date\"\n            ) IS NOT NULL AND LAG(consommation_gwh) OVER (\n                PARTITION BY \"R\u00e9gion\"\n                ORDER BY \"Date\"\n            ) != 0 \n            THEN (consommation_gwh - LAG(consommation_gwh) OVER (\n                    PARTITION BY \"R\u00e9gion\"\n                    ORDER BY \"Date\"\n                )) / LAG(consommation_gwh) OVER (\n                    PARTITION BY \"R\u00e9gion\"\n                    ORDER BY \"Date\"\n                ) * 100\n            ELSE NULL\n        END AS taux_variation_pct\n    FROM daily_consumption\n),\ntop_variations AS (\n    SELECT \n        \"R\u00e9gion\",\n        \"Date\",\n        consommation_gwh,\n        variation_gwh,\n        taux_variation_pct\n    FROM daily_variation\n    WHERE variation_gwh IS NOT NULL  -- Ignore les premi\u00e8res lignes de chaque r\u00e9gion\n    ORDER BY ABS(variation_gwh) DESC  -- Trier par \u00e9cart absolu d\u00e9croissant\n    LIMIT 20\n)\nSELECT *\nFROM top_variations", "relation_name": "\"dev\".\"main\".\"3_4\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:01.995743Z", "completed_at": "2025-01-09T11:47:02.000066Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:02.000490Z", "completed_at": "2025-01-09T11:47:02.035242Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.060660362243652344, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_5", "compiled": true, "compiled_code": "WITH yearly_renewable_production AS (\n    SELECT\n        EXTRACT(YEAR FROM \"Date\") AS year,\n        SUM(COALESCE(eolien, 0) + \n            COALESCE(solaire, 0) + \n            COALESCE(hydraulique, 0) + \n            COALESCE(bioenergies, 0)) / 2000 AS production_renouvelable_totale_gwh -- Conversion MW \u2192 GWh\n    FROM \"dev\".\"main\".\"clean\"\n    WHERE EXTRACT(YEAR FROM \"Date\") BETWEEN 2013 AND 2022\n    GROUP BY EXTRACT(YEAR FROM \"Date\")\n),\ndaily_cumulative_consumption AS (\n    SELECT\n        EXTRACT(YEAR FROM \"Date\") AS year,\n        \"Date\",\n        SUM(COALESCE(consommation, 0)) / 2000 AS consommation_journaliere_gwh,\n        SUM(SUM(COALESCE(consommation, 0)) / 2000) OVER (\n            PARTITION BY EXTRACT(YEAR FROM \"Date\")\n            ORDER BY \"Date\"\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS consommation_cumulee_gwh -- Consommation cumul\u00e9e en GWh\n    FROM \"dev\".\"main\".\"clean\"\n    WHERE EXTRACT(YEAR FROM \"Date\") BETWEEN 2013 AND 2022\n    GROUP BY EXTRACT(YEAR FROM \"Date\"), \"Date\"\n),\nthreshold_exceedance AS (\n    SELECT\n        dcc.year,\n        dcc.\"Date\",\n        yrp.production_renouvelable_totale_gwh,\n        dcc.consommation_cumulee_gwh\n    FROM daily_cumulative_consumption dcc\n    JOIN yearly_renewable_production yrp\n        ON dcc.year = yrp.year\n    WHERE dcc.consommation_cumulee_gwh >= yrp.production_renouvelable_totale_gwh\n),\nfirst_exceed_date AS (\n    SELECT\n        year,\n        MIN(\"Date\") AS date_depassement -- Premi\u00e8re date o\u00f9 la consommation d\u00e9passe la production annuelle renouvelable\n    FROM threshold_exceedance\n    GROUP BY year\n)\nSELECT *\nFROM first_exceed_date\nORDER BY year", "relation_name": "\"dev\".\"main\".\"3_5\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:02.059228Z", "completed_at": "2025-01-09T11:47:02.064389Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:02.064798Z", "completed_at": "2025-01-09T11:47:02.102582Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06437325477600098, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_6", "compiled": true, "compiled_code": "WITH sequenced_consumption AS (\n    -- Identifie les s\u00e9quences d'augmentation de consommation\n    SELECT\n        CONCAT(\"Date\", ' ', \"Heure\") AS \"Date_Heure\",  -- Combinaison de la date et de l'heure\n        \"R\u00e9gion\",\n        \"consommation\",\n        ROW_NUMBER() OVER (PARTITION BY \"R\u00e9gion\" ORDER BY \"Date\", \"Heure\") AS row_num,\n        CASE \n            WHEN \"consommation\" > LAG(\"consommation\") OVER (PARTITION BY \"R\u00e9gion\" ORDER BY \"Date\", \"Heure\") THEN 0 \n            ELSE 1 \n        END AS is_new_sequence\n    FROM \"dev\".\"main\".\"clean\"\n    WHERE \"consommation\" IS NOT NULL\n),\nsequence_grouped AS (\n    -- Cr\u00e9e les groupes de s\u00e9quences continues\n    SELECT \n        \"Date_Heure\",\n        \"R\u00e9gion\",\n        \"consommation\",\n        row_num,\n        SUM(is_new_sequence) OVER (PARTITION BY \"R\u00e9gion\" ORDER BY row_num ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS sequence_group\n    FROM sequenced_consumption\n),\nsequence_details AS (\n    -- Agr\u00e8ge les s\u00e9quences par groupe et calcule la dur\u00e9e\n    SELECT \n        MIN(CAST(\"Date_Heure\" AS TIMESTAMP)) AS start_datetime,\n        MAX(CAST(\"Date_Heure\" AS TIMESTAMP)) AS end_datetime,\n        \"R\u00e9gion\",\n        ARRAY_AGG(\"consommation\" ORDER BY \"Date_Heure\") AS sequence,\n        COUNT(*) AS sequence_length\n    FROM sequence_grouped\n    GROUP BY \"R\u00e9gion\", sequence_group\n    HAVING COUNT(*) > 1  -- Filtre les s\u00e9quences de plus d'une valeur (augmentation continue)\n),\nranked_sequences AS (\n    -- Classe les s\u00e9quences par longueur d\u00e9croissante et par date de d\u00e9but pour g\u00e9rer les \u00e9galit\u00e9s\n    SELECT \n        start_datetime,\n        end_datetime,\n        \"R\u00e9gion\",\n        sequence,\n        sequence_length,\n        ROW_NUMBER() OVER (PARTITION BY \"R\u00e9gion\" ORDER BY sequence_length DESC, start_datetime) AS rank\n    FROM sequence_details\n)\n-- S\u00e9lectionne les trois plus longues s\u00e9quences\nSELECT \n    start_datetime AS \"Date - Heure\",\n    -- Calcul de la dur\u00e9e manuellement (en heures, minutes, secondes)\n    EXTRACT(HOUR FROM end_datetime - start_datetime) || ':' || \n    LPAD(CAST(EXTRACT(MINUTE FROM end_datetime - start_datetime) AS VARCHAR), 2, '0') || ':' || \n    LPAD(CAST(EXTRACT(SECOND FROM end_datetime - start_datetime) AS VARCHAR), 2, '0') AS \"Dur\u00e9e (hh:mm:ss)\",\n    \"R\u00e9gion\",\n    sequence AS \"S\u00e9quence (MW*)\",\n    rank AS \"Rang\"\nFROM ranked_sequences\nWHERE rank <= 3\nORDER BY \"Rang\", \"R\u00e9gion\"", "relation_name": "\"dev\".\"main\".\"3_6\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:02.126848Z", "completed_at": "2025-01-09T11:47:02.130689Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:02.131104Z", "completed_at": "2025-01-09T11:47:02.175952Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07002592086791992, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.3_7", "compiled": true, "compiled_code": "SELECT\n    \"Date\",\n    strftime('%Y-%m', \"Date\") AS mois,\n    EXTRACT(YEAR FROM \"Date\") AS annee,\n    \"R\u00e9gion\",\n    CASE \n        WHEN \"R\u00e9gion\" IN ('Normandie','Pays de la Loire','Bretagne', 'Centre-Val de Loire') THEN 'NO'\n        WHEN \"R\u00e9gion\" IN ('Grand Est', 'Bourgogne-Franche-Comt\u00e9','Hauts-de-France') THEN 'NE'\n        WHEN \"R\u00e9gion\" IN ('Auvergne-Rh\u00f4ne-Alpes', 'Provence-Alpes-C\u00f4te d''Azur') THEN 'SE'\n        WHEN \"R\u00e9gion\" IN ('Occitanie', 'Nouvelle-Aquitaine') THEN 'SO'\n        ELSE 'IdF' -- Pour les r\u00e9gions sp\u00e9cifiques \u00e0 chaque zone g\u00e9ographique\n    END AS zone,\n    SUM(COALESCE(TRY_CAST(\"consommation\" AS INT), 0)) / 2000 AS consommation_en_GWH\nFROM \n    \"dev\".\"main\".\"clean\"\nWHERE \n    \"R\u00e9gion\" IS NOT NULL\n    AND \"Date\" IS NOT NULL\n    AND \"R\u00e9gion\" != 'Corse'  -- Exclure la Corse\nGROUP BY CUBE(\n    \"Date\", \n    strftime('%Y-%m', \"Date\"), \n    EXTRACT(YEAR FROM \"Date\"), \n    \"R\u00e9gion\", \n    CASE \n        WHEN \"R\u00e9gion\" IN ('Normandie','Pays de la Loire','Bretagne', 'Centre-Val de Loire') THEN 'NO'\n        WHEN \"R\u00e9gion\" IN ('Grand Est', 'Bourgogne-Franche-Comt\u00e9','Hauts-de-France') THEN 'NE'\n        WHEN \"R\u00e9gion\" IN ('Auvergne-Rh\u00f4ne-Alpes', 'Provence-Alpes-C\u00f4te d''Azur') THEN 'SE'\n        WHEN \"R\u00e9gion\" IN ('Occitanie', 'Nouvelle-Aquitaine') THEN 'SO'\n        ELSE 'IdF' \n    END\n)\nHAVING\n    \"R\u00e9gion\" IS NOT NULL AND zone IS NOT NULL\nORDER BY \n    \"Date\", mois, annee, \"R\u00e9gion\", zone", "relation_name": "\"dev\".\"main\".\"3_7\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:02.200196Z", "completed_at": "2025-01-09T11:47:02.204315Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:02.204750Z", "completed_at": "2025-01-09T11:47:02.240062Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.062308549880981445, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.clean_temp", "compiled": true, "compiled_code": "WITH temperature_data AS (\n    -- Chargement des donn\u00e9es de temp\u00e9rature\n    SELECT\n        ID,\n        Date,\n        \"Code INSEE r\u00e9gion\" AS code_insee_region,\n        R\u00e9gion,\n        \"TMin (\u00b0C)\" AS tmin,\n        \"TMax (\u00b0C)\" AS tmax,\n        \"TMoy (\u00b0C)\" AS tmoy\n    FROM temperature  -- La table existante\n),\nclean_data_with_temp AS (\n    -- Jointure entre les donn\u00e9es nettoy\u00e9es et les donn\u00e9es de temp\u00e9rature\n    SELECT\n        c.\"Code INSEE r\u00e9gion\",\n        c.R\u00e9gion,\n        c.Date,\n        c.Heure,\n        c.consommation,\n        c.eolien,\n        c.thermique,\n        c.bioenergies,\n        c.nucleaire,\n        c.solaire,\n        c.hydraulique,\n        c.pompage,\n        c.ech_physiques,\n        c.production_totale,\n        t.tmin,\n        t.tmax,\n        t.tmoy\n    FROM \"dev\".\"main\".\"clean\" c  -- Table clean, issue de DBT\n    LEFT JOIN temperature_data t\n        ON c.Date = t.Date\n        AND c.\"Code INSEE r\u00e9gion\" = t.code_insee_region\n)\n-- Cr\u00e9ation de la table finale\nSELECT\n    \"Code INSEE r\u00e9gion\",\n    R\u00e9gion,\n    Date,\n    Heure,\n    consommation,\n    eolien,\n    thermique,\n    bioenergies,\n    nucleaire,\n    solaire,\n    hydraulique,\n    pompage,\n    ech_physiques,\n    production_totale,\n    tmin,\n    tmax,\n    tmoy\nFROM clean_data_with_temp", "relation_name": "\"dev\".\"main\".\"clean_temp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-09T11:47:02.265936Z", "completed_at": "2025-01-09T11:47:02.271149Z"}, {"name": "execute", "started_at": "2025-01-09T11:47:02.271572Z", "completed_at": "2025-01-09T11:47:02.304870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06015944480895996, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.transform.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom \"dev\".\"main\".\"my_first_dbt_model\"\nwhere id = 1", "relation_name": "\"dev\".\"main\".\"my_second_dbt_model\""}], "elapsed_time": 1.7809693813323975, "args": {"static_parser": true, "empty": false, "version_check": true, "exclude": [], "write_json": true, "macro_debugging": false, "use_colors_file": true, "enable_legacy_logger": false, "populate_cache": true, "profiles_dir": "/home/ETUDIANT/e24a518u/.dbt", "strict_mode": false, "print": true, "log_level_file": "debug", "introspect": true, "favor_state": false, "show_resource_report": false, "partial_parse": true, "vars": {}, "log_format_file": "debug", "use_colors": true, "log_file_max_bytes": 10485760, "log_format": "default", "partial_parse_file_diff": true, "defer": false, "quiet": false, "send_anonymous_usage_stats": true, "cache_selected_only": false, "indirect_selection": "eager", "select": [], "which": "run", "source_freshness_run_project_hooks": false, "require_explicit_package_overrides_for_builtin_materializations": true, "project_dir": "/home/ETUDIANT/e24a518u/Bureau/tp sql/transform", "warn_error_options": {"include": [], "exclude": []}, "log_level": "info", "log_path": "/home/ETUDIANT/e24a518u/Bureau/tp sql/transform/logs", "invocation_command": "dbt run", "require_resource_names_without_spaces": false, "printer_width": 80}}